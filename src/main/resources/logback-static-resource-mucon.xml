<?xml version="1.0" encoding="UTF-8"?>
<configuration scan="true" scanPeriod="60 seconds" debug="false">

	<springProperty scope="context" name="logPath" source="logging.path"/>
	<springProperty scope="context" name="port" source="server.port"/>
	<springProperty scope="context" name="contextName" source="spring.application.name"/>

	<!--输出到控制台 ConsoleAppender -->
	<appender name="consoleAppender" class="ch.qos.logback.core.ConsoleAppender">
		<!--展示格式 layout -->
		<layout class="ch.qos.logback.classic.PatternLayout">
			<pattern>
				<pattern>%d{HH:mm:ss.SSS} %contextName [%thread] %-5level %logger{36} - %msg%n</pattern>
			</pattern>
		</layout>
	</appender>
	<!-- RollingFileAppender：滚动记录文件，先将日志记录到指定文件，当符合某个条件时，将日志记录到其他文件 -->    
	<!-- 以下的大概意思是：1.先按日期存日志，日期变了，将前一天的日志文件名重命名为XXX%日期%索引，新的日志仍然是demo.log -->    
	<!-- 2.如果日期没有发生变化，但是当前日志的文件大小超过1KB时，对当前日志进行分割 重命名 -->
	<appender name="rollingFileAppender"
		class="ch.qos.logback.core.rolling.RollingFileAppender">
		<File>${logPath}/${contextName}/${contextName}.log</File>
		<!-- rollingPolicy:当发生滚动时，决定 RollingFileAppender 的行为，涉及文件移动和重命名。 -->
		<!-- TimeBasedRollingPolicy： 最常用的滚动策略，它根据时间来制定滚动策略，既负责滚动也负责出发滚动 -->
		<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
			<!-- 活动文件的名字会根据fileNamePattern的值，每隔一段时间改变一次 -->
			<!-- 文件名：log/demo.2017-12-05.0.log -->
			<fileNamePattern>${logPath}/${contextName}/${contextName}.%d.%i.log</fileNamePattern>
			<!-- 每产生一个日志文件，该日志文件的保存期限为30天 
			<maxHistory>30</maxHistory>
			-->
			<timeBasedFileNamingAndTriggeringPolicy
				class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
				<!-- maxFileSize:这是活动文件的大小，默认值是10MB，测试时可改成1KB看效果 -->
				<maxFileSize>10MB</maxFileSize>
			</timeBasedFileNamingAndTriggeringPolicy>
		</rollingPolicy>
		<encoder>
			<!-- pattern节点，用来设置日志的输入格式 -->
			<pattern> %d %p (%file:%line\)- %m%n</pattern>
			<!-- 记录日志的编码:此处设置字符集 - -->
			<charset>UTF-8</charset>
		</encoder>
	</appender>
   <!-- 新增appender指定消息推送类单独输出日志 -->
   <appender name="messageSendHelperLog" class="ch.qos.logback.core.rolling.RollingFileAppender">
       <File>${logPath}/framework/MessageSendHelper.log</File>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
			<fileNamePattern>${logPath}/framework/MessageSendHelper.%d.%i.log</fileNamePattern>
			<timeBasedFileNamingAndTriggeringPolicy
				class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
				<maxFileSize>10MB</maxFileSize>
			</timeBasedFileNamingAndTriggeringPolicy>
		</rollingPolicy>
		<encoder>
			<pattern> %d %p (%file:%line\)- %m%n</pattern>
			<charset>UTF-8</charset>
		</encoder>
   
   </appender>
   <!-- 新增log  -->
   <logger name="net.xyt.api.framework.MessageSendHelper" level="info" additivity="false">
      <appender-ref ref="messageSendHelperLog" />  
   </logger> 
   <logger name="net.xyt.api.framework.MessageCounter" level="info" additivity="false">
      <appender-ref ref="messageSendHelperLog" />  
   </logger>
	<!--指定最基础的日志输出级别 -->
	<root level="info">
		<!--appender将会添加到这个loger -->
		<appender-ref ref="consoleAppender" />
		<appender-ref ref="rollingFileAppender" />
	</root>
</configuration>